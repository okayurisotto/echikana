diff --git a/lib/backend.d.ts b/lib/backend.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..4df3970f82f13b26e43c9c42c51305016dce920b
--- /dev/null
+++ b/lib/backend.d.ts
@@ -0,0 +1,9 @@
+import { Backend, InferenceSession, InferenceSessionHandler } from 'onnxruntime-common';
+import { Binding } from './binding';
+declare class OnnxruntimeBackend implements Backend {
+    init(): Promise<void>;
+    createInferenceSessionHandler(pathOrBuffer: string | Uint8Array, options?: InferenceSession.SessionOptions): Promise<InferenceSessionHandler>;
+}
+export declare const onnxruntimeBackend: OnnxruntimeBackend;
+export declare const listSupportedBackends: () => Binding.SupportedBackend[];
+export {};
diff --git a/lib/binding.d.ts b/lib/binding.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..1888a98704864395838cb2d6bf39c75dd4a6e22c
--- /dev/null
+++ b/lib/binding.d.ts
@@ -0,0 +1,37 @@
+import { InferenceSession, OnnxValue } from 'onnxruntime-common';
+type SessionOptions = InferenceSession.SessionOptions;
+type FeedsType = {
+    [name: string]: OnnxValue;
+};
+type FetchesType = {
+    [name: string]: OnnxValue | null;
+};
+type ReturnType = {
+    [name: string]: OnnxValue;
+};
+type RunOptions = InferenceSession.RunOptions;
+/**
+ * Binding exports a simple synchronized inference session object wrap.
+ */
+export declare namespace Binding {
+    interface InferenceSession {
+        loadModel(modelPath: string, options: SessionOptions): void;
+        loadModel(buffer: ArrayBuffer, byteOffset: number, byteLength: number, options: SessionOptions): void;
+        readonly inputNames: string[];
+        readonly outputNames: string[];
+        run(feeds: FeedsType, fetches: FetchesType, options: RunOptions): ReturnType;
+        dispose(): void;
+    }
+    interface InferenceSessionConstructor {
+        new (): InferenceSession;
+    }
+    interface SupportedBackend {
+        name: string;
+        bundled: boolean;
+    }
+}
+export declare const binding: {
+    InferenceSession: Binding.InferenceSessionConstructor;
+    listSupportedBackends: () => Binding.SupportedBackend[];
+};
+export {};
diff --git a/lib/index.d.ts b/lib/index.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..d086ab804f3df470cbb87248e4e3bdc4bda06b7b
--- /dev/null
+++ b/lib/index.d.ts
@@ -0,0 +1,2 @@
+export * from 'onnxruntime-common';
+export { listSupportedBackends } from './backend';
diff --git a/lib/version.d.ts b/lib/version.d.ts
new file mode 100644
index 0000000000000000000000000000000000000000..a833bb9d61d9f9dfa0047cb8a876c265782b7b9b
--- /dev/null
+++ b/lib/version.d.ts
@@ -0,0 +1 @@
+export declare const version = "1.18.0";
diff --git a/package.json b/package.json
index e18d8b3cabd4c454f7889518dca568afe8243a56..2b49a7471c75a3fce470a3ddcd69736f1f795775 100644
--- a/package.json
+++ b/package.json
@@ -50,6 +50,6 @@
     "darwin",
     "linux"
   ],
-  "types": "dist/index.d.ts",
+  "types": "lib/index.d.ts",
   "description": "ONNXRuntime Node.js binding"
 }
