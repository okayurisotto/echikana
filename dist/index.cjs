"use strict";var k=Object.create;var c=Object.defineProperty;var I=Object.getOwnPropertyDescriptor;var T=Object.getOwnPropertyNames;var B=Object.getPrototypeOf,C=Object.prototype.hasOwnProperty;var L=(r,n)=>{for(var e in n)c(r,e,{get:n[e],enumerable:!0})},z=(r,n,e,o)=>{if(n&&typeof n=="object"||typeof n=="function")for(let i of T(n))!C.call(r,i)&&i!==e&&c(r,i,{get:()=>n[i],enumerable:!(o=I(n,i))||o.enumerable});return r};var v=(r,n,e)=>(e=r!=null?k(B(r)):{},z(n||!r||!r.__esModule?c(e,"default",{value:r,enumerable:!0}):e,r)),P=r=>z(c({},"__esModule",{value:!0}),r);var F={};L(F,{EchikanaInferencer:()=>l,errors:()=>S});module.exports=P(F);var f=v(require("onnxruntime-node"),1),A=v(require("sharp"),1);var g=r=>{let n=r.map(e=>Math.exp(e)).reduce((e,o)=>e+o,0);return r.map(e=>Math.exp(e)/n)};var a=class extends Error{constructor(){super("The inference model has not been initialized.")}},u=class extends Error{constructor(e){super("Image format conversion by sharp failed.");this.error=e}},t=class extends Error{constructor(){super("An internal error has occurred.")}},l=class{constructor(n){this.model=n}size=224;output="logits";session=null;get initialized(){return this.session!==null}async initialize(){this.initialized&&await this.dispose(),this.session=await f.default.InferenceSession.create(this.model)}async inference(n){if(this.initialized||await this.initialize(),this.session===null)throw new a;let e=await(async()=>{try{return await(0,A.default)(n).resize(this.size,this.size,{kernel:"nearest",fit:"fill"}).removeAlpha().raw().toBuffer()}catch(s){return s instanceof Error?new u(s):new t}})();if(e instanceof Error)throw e;let o=[],i=[],d=[];for(let s=0;s<e.byteLength;s+=3){let b=e[s+0];if(b===void 0)throw new t;o.push(b);let x=e[s+1];if(x===void 0)throw new t;i.push(x);let y=e[s+2];if(y===void 0)throw new t;d.push(y)}let E=[...o,...i,...d].map(s=>(s/255-.5)/.5),h=new f.default.Tensor(new Float32Array(E),[1,3,this.size,this.size]),p=(await this.session.run({pixel_values:h}))[this.output];if(p===void 0)throw new t;let m=p.data;if(!(m instanceof Float32Array))throw new t;let[,w]=g([...m]);if(w===void 0)throw new t;return h.dispose(),p.dispose(),w}async dispose(){await this.session?.release()}};var S={InitializationError:a,SharpError:u,InternalError:t};0&&(module.exports={EchikanaInferencer,errors});
